name: Build & Release pipeline

on:
  push:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.tag.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: semantic version
        id: tag
        uses: paulhatch/semantic-version@v5.4.0
        with:
          tag_prefix: "v"
          major_pattern: "BREAKING CHANGE:"
          minor_pattern: "feat:"
          version_format: "${major}.${minor}.${patch}"
          bump_each_commit: true

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Restore
        run: dotnet restore src/HelloWorld.csproj

      - name: Build
        run: dotnet build src/HelloWorld.csproj -c Release --no-restore

      - name: Test
        run: dotnet test tests/HelloWorld.Tests.csproj -c Release

      - name: Publish
        run: dotnet publish src/HelloWorld.csproj -c Release -o app

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build Docker image
        run: |
          docker build -t docker.io/${{ secrets.DOCKERHUB_USER }}/hello-world:v${{ steps.tag.outputs.version }} .

      - name: Security scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: docker.io/${{ secrets.DOCKERHUB_USER }}/hello-world:v${{ steps.tag.outputs.version }}
          severity: CRITICAL,HIGH
          exit-code: 1
          format: table

      - name: Push Docker image
        run: |
          docker push docker.io/${{ secrets.DOCKERHUB_USER }}/hello-world:v${{ steps.tag.outputs.version }}

      - name: Launch Container And Assert
        run: |
          console_output=$(docker run docker.io/${{ secrets.DOCKERHUB_USER }}/hello-world:v${{ steps.tag.outputs.version }})
          if echo "$console_output" | grep -q "Hello World"; then
            echo "Output contains 'Hello World'"
          else
            echo "console output doesn't conatins 'Hello World', but $console_output"
            exit 1
          fi
    
  propagate_metadata:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Print git version
        run: |
          echo "Git version is: ${{ needs.build.outputs.version }}"   
